{
  colors:{
    background:background,
    text:foreground,
    selection:foreground,
    status:grey,
    frame:foreground,
    type:green,
    keyword:yellow,
    linecomment:blue,
    blockcomment:blue,
    string:yellow,
    preprocessor:aqua,
    bracket:blue,
    plus:lime,
    minus:red,
    linenumber:grey,
    bracketerror:red,
    consolenormal:grey,
    consolewarning:yellow,
    consoleerror:red,
    bookmark:aqua,
    directory:aqua,
    modified:red,
    removed:red,
    spellcheck:red,
    index:teal,
  },
  wrapping:1,
  invisibles:0,
  addresswidth:6,
  linewidth:0,
  hexwidth:0,
  searchfilebinary:0,
  searchfilepattern:"^.*\\.(cpp|c|h|hpp|lua|php|js|txt|sql|sh|pas|bas|resx|xml|html|htm|css|cs|log)$",
  errorpattern:"^\\s*([^\\n\\r]*?)\\s*\\:(\\d+)\\:((\\d+)\\:)?\\s(error\\:|warning\\:)",
  shell:{
    compile:"([ -f Makefile ] && make all -j) || ./make.sh",
    recompile:"([ -f Makefile ] && make clean && make all -j) || ./make.sh --rebuild",
    spell:"aspell -a",
  },
  keys:{
    up:up,
    down:down,
    left:left,
    right:right,
    shift+up:selectup,
    shift+down:selectdown,
    shift+left:selectleft,
    shift+right:selectright,
    ctrl+q:quit,
    pageup:pageup,
    pagedown:pagedown,
    shift+pageup:selectpageup,
    shift+pagedown:selectpagedown,
    backspace:backspace,
    delete:delete,
    ctrl+delete:deletewordnext,
    shift+ctrl+delete:deletewordprev,
    insert:insert,
    shift+delete:cut,
    shift+insert:paste,
    first:first,
    last:last,
    shift+first:selectfirst,
    shift+last:selectlast,
    ctrl+first:home,
    ctrl+last:end,
    shift+ctrl+first:selecthome,
    shift+ctrl+last:selectend,
    ctrl+f:search,
    f3:searchnext,
    ctrl+z:undo,
    ctrl+y:redo,
    ctrl+x:cut,
    ctrl+c:copy,
    ctrl+v:paste,
    tab:tab,
    shift+tab:untab,
    ctrl+s:saveall,
    mouse:mouse,
    shift+mouse:mouse,
    shift+f3:searchprevious,
    ctrl+o:open,
    f4:split,
    shift+f4:unsplit,
    ctrl+b:browser,
    ctrl+u:switch,
    f2:bookmark,
    ctrl+w:close,
    ctrl+d:documents,
    return:return,
    ctrl+a:selectall,
    pastestart:paste,
    f5:shell compile,
    shift+f5:shell recompile,
    ctrl+f5:shellkill,
    ctrl+h:replace,
    f6:replacenext,
    shift+f6:replaceprevious,
    f7:replaceall,
    ctrl+g:goto,
    ctrl+r:reload,
    ctrl+p:commands,
    ctrl+k:cutline,
    ctrl+up:blockup,
    ctrl+down:blockdown,
    ctrl+pageup:bookmarkprev,
    ctrl+pagedown:bookmarknext,
    ctrl+left:wordprev,
    ctrl+right:wordnext,
    shift+ctrl+left:selectwordprev,
    shift+ctrl+right:selectwordnext,
    escape:escape,
    ctrl+f3:searchall,
    shift+ctrl+f3:searchdirectory,
    ctrl+t:new,
    ctrl+n:splitnext,
    ctrl+e:documentback,
    f1:help,
    shift+f1:help,
    shift+alt+right:splitgrabnext,
    shift+alt+left:splitgrabprev,
    shift+alt+up:splitgrabdecrease,
    shift+alt+down:splitgrabincrease,
    ctrl+f4:splitgrabrotate,
    alt+pageup:errorprev,
    alt+pagedown:errornext,
    alt+left:bracketprev,
    alt+right:bracketnext,
    ctrl+space:autocomplete,
    space:space,
  },
  fileextensions:{
    c:C,
    h:C,
    cpp:C++,
    hpp:C++,
    cc:C++,
    cxx:C++,
    sql:SQL,
    lua:Lua,
    php:PHP,
    xml:XML,
    diff:Patch,
    patch:Patch,
    js:JS,
    cs:CS,
    md:MD,
  },
  filetypes:{
    compiler_output:{
      parser:c,
      colors:{
        keywords:{
          "error:":consoleerror,
          "warning:":consolewarning,
        },
        preprocessor:{},
      },
    },
    C:{
      parser:c,
      colors:{
        keywords:{
          asm:keyword,
          auto:type,
          bool:type,
          break:keyword,
          char:type,
          case:keyword,
          const:type,
          continue:keyword,
          default:keyword,
          do:keyword,
          double:type,
          else:keyword,
          enum:type,
          extern:type,
          float:type,
          for:keyword,
          goto:keyword,
          if:keyword,
          inline:type,
          int:type,
          int8_t:type,
          int16_t:type,
          int32_t:type,
          int64_t:type,
          long:type,
          NULL:keyword,
          register:keyword,
          restrict:keyword,
          return:keyword,
          short:type,
          signed:type,
          size_t:type,
          sizeof:keyword,
          ssize_t:type,
          static:type,
          struct:type,
          switch:keyword,
          typedef:type,
          union:type,
          uint8_t:type,
          uint16_t:type,
          uint32_t:type,
          uint64_t:type,
          unsigned:type,
          void:type,
          volatile:type,
          while:keyword,
          _Alignas:keyword,
          _Alignof:keyword,
          _Atomic:keyword,
          _Bool:keyword,
          _Complex:keyword,
          _Generic:keyword,
          _Imaginary:keyword,
          _Noreturn:keyword,
          _Static_assert:keyword,
          _Thread_local:keyword,
        },
        preprocessor:{
          define:preprocessor,
          elif:preprocessor,
          else:preprocessor,
          endif:preprocessor,
          if:preprocessor,
          ifdef:preprocessor,
          ifndef:preprocessor,
          include:preprocessor,
          pragma:preprocessor,
        }
      }
    },
    C++:{
      parser:c,
      colors:{
        keywords:{
          alignas:keyword,
          alignof:keyword,
          and:keyword,
          and_eq:keyword,
          asm:keyword,
          autotype,
          bitand:keyword,
          bitor:keyword,
          bool:type,
          break:keyword,
          case:keyword,
          catch:keyword,
          char:type,
          char16_t:type,
          char32_t:type,
          class:type,
          compl:keyword,
          const:type,
          constexpr:keyword,
          const_cast:keyword,
          continue:keyword,
          decltype:keyword,
          default:keyword,
          delete:keyword,
          do:keyword,
          double:type,
          dynamic_cast:keyword,
          else:keyword,
          enum:type,
          explict:keyword,
          export:keyword,
          extern:keyword,
          false:type,
          float:type,
          for:keyword,
          friend:keyword,
          goto:keyword,
          if:keyword,
          inline:keyword,
          int:type,
          int8_t:type,
          int16_t:type,
          int32_t:type,
          int64_t:type,
          long:type,
          mutable:type,
          namespace:keyword,
          new:keyword,
          noexcept:keyword,
          not:keyword,
          not_eq:keyword,
          NULL:keyword,
          nullptr:type,
          operator:type,
          or:keyword,
          or_eq:keyword,
          private:type,
          protected:type,
          public:type,
          register:type,
          reinterpret_cast:keyword,
          return:keyword,
          short:type,
          signed:type,
          size_t:type,
          sizeof:keyword,
          ssize_t:type,
          static:type,
          static_assert:keyword,
          static_cast:keyword,
          struct:type,
          switch:keyword,
          template:type,
          this:type,
          thread_local:keyword,
          throw:keyword,
          true:type,
          try:keyword,
          typedef:type,
          typeid:keyword,
          typename:keyword,
          union:type,
          uint8_t:type,
          uint16_t:type,
          uint32_t:type,
          uint64_t:type,
          unsigned:type,
          using:keyword,
          virtual:type,
          void:type,
          volatile:type,
          wchar_t:type,
          while:keyword,
          xor:keyword,
          xor_eq:keyword,
        },
        preprocessor:{
          define:preprocessor,
          elif:preprocessor,
          else:preprocessor,
          endif:preprocessor,
          if:preprocessor,
          ifdef:preprocessor,
          ifndef:preprocessor,
          include:preprocessor,
          pragma:preprocessor,
        }
      }
    },
    CS:{
      parser:c,
      colors:{
        keywords:{
          abstract:keyword,
          add:keyword,
          alias:keyword,
          ascending:keyword,
          as:keyword,
          async:keyword,
          await:keyword,
          base:keyword,
          bool:type,
          break:keyword,
          byte:type,
          char:type,
          case:keyword,
          catch:keyword,
          checked:keyword,
          class:keyword,
          const:type,
          continue:keyword,
          decimal:type,
          default:keyword,
          delegate:keyword,
          descending:keyword,
          do:keyword,
          double:type,
          dynamic:keyword,
          else:keyword,
          enum:type,
          equals:keyword,
          event:keyword,
          explicit:keyword,
          extern:type,
          false:type,
          float:type,
          for:keyword,
          foreach:keyword,
          from:keyword,
          get:keyword,
          global:keyword,
          goto:keyword,
          group:keyword,
          if:keyword,
          implicit:keyword,
          in:type,
          int:type,
          Int16:type,
          Int32:type,
          Int64:type,
          interface:keyword,
          internal:keyword,
          into:keyword,
          is:keyword,
          join:keyword,
          let:keyword,
          lock:keyword,
          long:type,
          nameof:keyword,
          namespace:keyword,
          new:keyword,
          null:keyword,
          NULL:keyword,
          object:keyword,
          on:keyword,
          operator:keyword,
          orderby:keyword,
          out:keyword,
          override:keyword,
          params:keyword,
          partial:keyword,
          private:keyword,
          protected:keyword,
          public:keyword,
          readonly:keyword,
          ref:keyword,
          remove:keyword,
          return:keyword,
          restrict:keyword,
          return:keyword,
          sbyte:type,
          sealed:keyword,
          select:keyword,
          set:keyword,
          short:type,
          sizeof:keyword,
          stackalloc:keyword,
          signed:type,
          static:type,
          struct:type,
          string:type,
          String:type,
          switch:keyword,
          this:keyword,
          throw:keyword,
          true:keyword,
          try:keyword,
          typeof:keyword,
          uint:type,
          uint16:type,
          uint32:type,
          uint64:type,
          ulong:type,
          unchecked:keyword,
          unsafe:keyword,
          ushort:type,
          using:keyword,
          unsigned:type,
          value:type,
          var:type,
          virtual:keyword,
          void:type,
          volatile:type,
          when:keyword,
          where:keyword,
          while:keyword,
          yield:keyword,
        },
        preprocessor:{
          define:preprocessor,
          elif:preprocessor,
          else:preprocessor,
          endif:preprocessor,
          if:preprocessor,
          ifdef:preprocessor,
          ifndef:preprocessor,
          include:preprocessor,
          pragma:preprocessor,
          region:preprocessor,
          endregion:preprocessor,
        }
      }
    },
    JS:{
      parser:c,
      colors:{
        keywords:{
          break:keyword,
          case:keyword,
          catch:keyword,
          class:type,
          const:type,
          continue:keyword,
          debugger:keyword,
          default:keyword,
          delete:keyword,
          do:keyword,
          else:keyword,
          export:keyword,
          extends:type,
          false:type,
          finally:keyword,
          for:keyword,
          function:keyword,
          if:keyword,
          import:keyword,
          in:keyword,
          instanceof:type,
          let:keyword,
          new:keyword,
          null:type,
          return:keyword,
          super:keyword,
          switch:keyword,
          this:type,
          throw:keyword,
          true:type,
          try:keyword,
          typeof:type,
          var:type,
          void:type,
          while:keyword,
          with:type,
          yield:keyword,
        }
      }
    },
    Lua:{
      parser:lua,
      colors:{
        keywords:{
          and:keyword,
          break:keyword,
          do:keyword,
          else:keyword,
          elseif:keyword,
          end:keyword,
          false:type,
          for:keyword,
          function:keyword,
          if:keyword,
          in:type,
          local:type,
          nil:type,
          not:keyword,
          or:keyword,
          repeat:keyword,
          return:keyword,
          self:type,
          then:keyword,
          true:type,
          until:keyword,
          while:keyword,
        }
      }
    },
    MD:{
      parser:markdown,
    },
    PHP:{
      parser:php,
      colors:{
        keywords:{
          $this:type,
          __halt_compiler:keyword,
          abstract:keyword,
          and:keyword,
          array:keyword,
          as:keyword,
          break:keyword,
          callable:keyword,
          case:keyword,
          catch:keyword,
          class:type,
          clone:keyword,
          const:type,
          continue:keyword,
          declare:keyword,
          default:keyword,
          die:keyword,
          do:keyword,
          echo:keyword,
          else:keyword,
          elseif:keyword,
          empty:keyword,
          enddeclare:keyword,
          endfor:keyword,
          endforeach:keyword,
          endif:keyword,
          endswitch:keyword,
          endwhile:keyword,
          eval:keyword,
          exit:keyword,
          extends:keyword,
          false:type,
          final:keyword,
          finally:keyword,
          for:keyword,
          foreach:keyword,
          function:keyword,
          global:keyword,
          goto:keyword,
          if:keyword,
          implements:type,
          include:keyword,
          include_once:keyword,
          instanceof:type,
          insteadof:keyword,
          interface:type,
          isset:type,
          is_null:type,
          is_set:type,
          list:keyword,
          max:type,
          min:type,
          namespace:type,
          new:keyword,
          or:keyword,
          print:keyword,
          private:type,
          protected:type,
          public:type,
          require:keyword,
          require_once:keyword,
          return:keyword,
          static:keyword,
          switch:keyword,
          throw:keyword,
          trait:keyword,
          true:type,
          try:keyword,
          unset:type,
          use:type,
          var:type,
          while:keyword,
          xor:keyword,
          yield:keyword,
        }
      }
    },
    SQL:{
      parser:sql,
      colors:{
        keywords:{
          create:keyword,
          database:keyword,
          use:keyword,
          from:keyword,
          to:keyword,
          into:keyword,
          join:keyword,
          where:keyword,
          order:keyword,
          group:keyword,
          by:keyword,
          on:keyword,
          as:keyword,
          is:keyword,
          in:keyword,
          out:keyword,
          begin:keyword,
          end:keyword,
          delimiter:keyword,
          sql:keyword,
          data:keyword,
          insert:keyword,
          select:keyword,
          update:keyword,
          delete:keyword,
          replace:keyword,
          drop:keyword,
          duplicate:keyword,
          temporary:keyword,
          modifies:keyword,
          reads:keyword,
          returns:keyword,
          exists:keyword,
          return:keyword,
          leave:keyword,
          call:keyword,
          execute:keyword,
          show:keyword,
          function:keyword,
          procedure:keyword,
          declare:keyword,
          if:keyword,
          then:keyword,
          elseif:keyword,
          else:keyword,
          not:keyword,
          table:keyword,
          values:keyword,
          key:keyword,
          unique:keyword,
          primary:keyword,
          foreign:keyword,
          constraint:keyword,
          references:keyword,
          cascade:keyword,
          default:keyword,
          engine:keyword,
          charset:keyword,
          auto_increment:keyword,
          definer:keyword,
          and:keyword,
          or:keyword,
          set:keyword,
          count:keyword,
          limit:keyword,
          ignore:keyword,
          now:type,
          max:type,
          min:type,
          sum:type,
          null:type,
          bit:type,
          int:type,
          bigint:type,
          char:type,
          varchar:type,
          string:type,
          boolean:type,
          short:type,
          date:type,
          time:type,
          datetime:type,
          decimal:type,
          true:type,
          false:type,
        }
      }
    },
    Patch:{
      parser:patch,
    },
    XML:{
      parser:xml,
    },
  }
}
